#include "Object.as"
#include "RenderConsts.as"
#include "Voxels.as"
#include "Vec3D.as"

#define CLIENT_ONLY

const string maptile_name = "TileTextures.png";
const string sandtex_name = "SandTexture.png";
const string skyTex_name = "Sky.png";

Vertex[] water_Vertexes;
u16[] water_IDs;

void onInit(CRules@ this)
{
	Render::addScript(Render::layer_prehud, "Renders.as", "threedee", 0.0f);
	ComputeProjection(10.5);

	CBlob@ b = getLocalPlayerBlob();
	if(b!is null)
	{

	}	
}

void onTick(CRules@ this)
{	
	CPlayer@ p = getLocalPlayer();
	if(p !is null)
	{
		CBlob@ b = p.getBlob();
		if(b !is null)
		{
			VoxelMap@ voxmap;
			if (!b.get("voxmapInfo", @voxmap))
			{
				return;
			}
			if (getControls().isKeyJustPressed(KEY_KEY_Q))
			{
				voxmap.GenerateWorld();
			}			
			if (getControls().isKeyJustPressed(KEY_KEY_P))
			{
				voxmap.SaveWorld();
			}			
			if (getControls().isKeyJustPressed(KEY_KEY_L))
			{
				voxmap.LoadWorld();
			}
			if (b.get_f32("FOV") != 10.5f || b.get_f32("FOV") != 3.0f)
			{
				ComputeProjection(b.get_f32("FOV"));
			}

			voxmap.Update();
		}
	}	
}

void ComputeProjection(f32 FOV)
{
    Matrix::MakePerspective(proj, FOV/(pi*2), ratio, nearDist, farDist );
}

float LastCameraAngleX = 0.01f;
float LastCameraAngleY = 0.01f;
float LastCameraAngleZ = 0.01f;

void threedee(int id)
{
	CPlayer@ p = getLocalPlayer();
	if(p !is null)
	{
		CBlob@ b = p.getBlob();
		if(b !is null)
		{			
			VoxelMap@ voxmap;
			if (!b.get("voxmapInfo", @voxmap))
			{
				return;
			}

			Vec3f PlayerPos = Vec3f(b.get_f32("pos_x")/8,b.get_f32("pos_y")/8,b.get_f32("pos_z")/8);

			// preparing camera
			float NewCameraAngleX =  Maths::Abs(LastCameraAngleX-b.get_f32("dir_x")) > 300 ? b.get_f32("dir_x") : lerp(LastCameraAngleX, b.get_f32("dir_x"), getRenderApproximateCorrectionFactor());			
			LastCameraAngleX =  NewCameraAngleX;

			float NewCameraAngleY = lerp(LastCameraAngleY, b.get_f32("dir_y"), getRenderApproximateCorrectionFactor());
			LastCameraAngleY = NewCameraAngleY;
			
			float[] tempH;
			Matrix::MakeIdentity(tempH);
			Matrix::SetRotationDegrees(tempH, 0, NewCameraAngleX, 0);
			
			float[] tempV;
			Matrix::MakeIdentity(tempV);
			Matrix::SetRotationDegrees(tempV, NewCameraAngleY, 0, 0);
			
			float[] tempR;
			Matrix::MakeIdentity(tempR);
			float NewCameraAngleZ = lerp(LastCameraAngleZ, b.getVelocity().RotateBy(-b.getAngleDegrees()).y*32, getRenderApproximateCorrectionFactor()/8);
			
			float[] tempCam;
			Matrix::MakeIdentity(tempCam);			

			tempCam = Multiply(tempV, tempR);			
			cam = Multiply(tempCam, tempH);	

			// third person-ish
			//Matrix::SetTranslation(cam, 0, 0, 1);
			
			Render::SetBackfaceCull(true);
			Render::SetAlphaBlend(false);
			Render::SetZBuffer(true, true);
			Render::ClearZ();
			
			Matrix::MakeIdentity(model);
			Matrix::SetTranslation(model, 0, -32, 0);
			Matrix::SetScale(model, 10.2, 10.0, 10.2);
			Render::SetTransform(model, cam, proj);
			Render::RawTrianglesIndexed(skyTex_name, skybox_Vertexes, skybox_IDs);

			Matrix::MakeIdentity(model);
			if (voxmap.chunks.length > 0)
			{
				voxmap.RenderCursor(PlayerPos, model);
				voxmap.RenderWorld(PlayerPos, model);
			}

			//RenderProps(pos, cam, NewCameraAngleX, NewCameraAngleY, proj, eye_height);
		}
	}
}


const Vertex[] skybox_Vertexes = {
Vertex( 0.0, 46.863003, 0.0, 1.5, 0.0),
Vertex( 3.217316, 45.412853, 9.901882, 0.949707, 0.050018), Vertex( -8.423045, 45.412853, 6.119699, 1.149414, 0.050018), Vertex( -5.265292, 42.840679, 16.204899, 1.049805, 0.087708),
Vertex( 6.18972, 41.172798, 19.050001, 0.949707, 0.108093), Vertex( -2.316162, 36.972168, 25.504667, 1.013672, 0.156738), Vertex( 8.690941, 34.465603, 26.747967, 0.949707, 0.186401),
Vertex( 0.267896, 28.030968, 32.867668, 0.998535, 0.271729), Vertex( 13.78471, 42.840679, 10.015179, 0.849609, 0.087708),Vertex( 10.530581, 25.80184, 32.409798, 0.949707, 0.305176),
Vertex( 5.473624, 17.619513, 36.649849, 0.976074, 0.444824),Vertex( 16.865082, 36.972168, 19.272306, 0.885254, 0.156738),Vertex( 19.102398, 28.030968, 26.747967, 0.900879, 0.271729),
Vertex( 17.113985, 17.619513, 32.867668, 0.92334, 0.444824),Vertex( -0.000001, 8.763, 38.100002, 0.999512, 0.600098),Vertex( -5.847238, 18.483217, 36.372204, 1.024414, 0.429199),
Vertex( 5.847234, -0.525365, 36.372204, 0.974609, 0.728516),Vertex( -5.473627, -0.525365, 36.649849, 1.023438, 0.727539),Vertex( 11.773545, 8.763, 36.235256, 0.949707, 0.600098),
Vertex( 16.648533, -0.525365, 32.862648, 0.925293, 0.728516),Vertex( 22.394617, 8.763, 30.823549, 0.899902, 0.600098),Vertex( 25.970497, -0.525365, 26.433037, 0.875977, 0.727539),
Vertex( 26.109558, 18.483217, 25.988815, 0.874512, 0.429199),Vertex( 30.823549, 8.763, 22.394621, 0.849609, 0.600098),Vertex( 33.164635, -0.525365, 16.531153, 0.823242, 0.727539),
Vertex( 26.220076, 28.793356, 19.050001, 0.849609, 0.260742),Vertex( 32.78513, 18.483217, 16.800682, 0.825195, 0.429199),Vertex( 36.235256, 8.763, 11.773547, 0.799805, 0.600098),
Vertex( 36.398918, -0.525365, 5.67858, 0.774414, 0.728516),Vertex( 23.540648, 36.972168, 10.084175, 0.813965, 0.156738),Vertex( 38.099995, 8.763, 0.000004, 0.75, 0.600098),
Vertex( 36.398918, -0.525365, -5.67857, 0.725098, 0.728516),Vertex( 36.54752, 17.619513, 6.119699, 0.776367, 0.444824),Vertex( 31.341795, 28.030968, 9.901882, 0.79834, 0.271729),
Vertex( 36.235256, 8.763, -11.77354, 0.699707, 0.600098),Vertex( 33.164642, -0.525365, -16.531145, 0.67627, 0.727539),Vertex( 36.54752, 17.619513, -6.119696, 0.723145, 0.444824),
Vertex( 34.077679, 25.80184, 0.0, 0.749512, 0.305176),Vertex( 30.823555, 8.763, -22.394611, 0.649902, 0.600098),Vertex( 25.970509, -0.525365, -26.433027, 0.623535, 0.727539),
Vertex( 32.785126, 18.483215, -16.800676, 0.674316, 0.429199),Vertex( 31.341797, 28.03097, -9.901881, 0.701172, 0.271729),Vertex( 28.124475, 34.465603, 0.0, 0.749512, 0.186401),
Vertex( 26.220078, 28.793356, -19.049999, 0.649902, 0.260742),Vertex( 20.030355, 41.172798, 0.0, 0.749512, 0.108093),Vertex( 23.540649, 36.972168, -10.084175, 0.685547, 0.156738),
Vertex( 10.411455, 45.412853, 0.0, 0.749512, 0.050018),Vertex( 0.0, 46.863003, 0.0, 0.5, 0.0),Vertex( 13.784712, 42.840679, -10.015179, 0.649902, 0.087708),
Vertex( 3.217318, 45.412853, -9.901882, 0.549805, 0.050018),Vertex( 16.865084, 36.972168, -19.272306, 0.614258, 0.156738),Vertex( 6.189723, 41.172798, -19.050001, 0.549805, 0.108093),
Vertex( -8.423043, 45.412853, -6.119701, 0.349854, 0.050018),Vertex( -8.423045, 45.412853, 6.119699, 0.149902, 0.050018),Vertex( -5.265288, 42.840679, -16.204901, 0.449951, 0.087708),
Vertex( 8.690946, 34.465603, -26.747967, 0.549805, 0.186401),Vertex( -2.316157, 36.972168, -25.504671, 0.485352, 0.156738),Vertex( -16.204897, 41.172798, -11.773549, 0.349854, 0.108093),
Vertex( 19.1024, 28.03097, -26.747971, 0.598633, 0.271729),Vertex( -17.038839, 42.840679, -0.000001, 0.249878, 0.087708),Vertex( -13.117455, 36.972168, -21.995121, 0.414307, 0.156738),
Vertex( -16.204899, 41.172798, 11.773546, 0.149902, 0.108093),Vertex( -5.265292, 42.840679, 16.204899, 0.049988, 0.087708),Vertex( -24.972116, 36.972172, -5.678582, 0.2854, 0.156738),
Vertex( -13.117457, 36.972168, 21.995115, 0.085571, 0.156738),Vertex( -2.316162, 36.972168, 25.504667, 0.014412, 0.156738),Vertex( -24.972118, 36.972172, 5.678576, 0.214355, 0.156738),
Vertex( -22.753183, 34.465603, 16.531153, 0.149902, 0.186401),Vertex( -10.015181, 28.793356, 30.823547, 0.049988, 0.260742),Vertex( 0.267896, 28.030968, 32.867668, -0.001297, 0.271729),
Vertex( -19.535866, 28.030968, 26.433037, 0.101257, 0.271729),Vertex( -5.847238, 18.483217, 36.372204, 0.02536, 0.429199),Vertex( 5.473624, 17.619513, 36.649849, -0.02359, 0.444824),
Vertex( -16.648533, 18.483217, 32.862648, 0.074585, 0.429199),Vertex( -11.77355, 8.763, 36.235256, 0.049988, 0.600098),Vertex( -0.000001, 8.763, 38.100002, -0.0, 0.600098),
Vertex( -5.473627, -0.525365, 36.649849, 0.02359, 0.727539),Vertex( -17.113989, -0.525365, 32.867668, 0.076355, 0.727539),Vertex( -22.394621, 8.763, 30.823547, 0.099976, 0.600098),
Vertex( -26.109562, -0.525365, 25.988815, 0.125366, 0.728516),Vertex( -25.970501, 17.619513, 26.433037, 0.123535, 0.444824),Vertex( -30.823549, 8.763, 22.394615, 0.149902, 0.600098),
Vertex( -32.78513, -0.525365, 16.80068, 0.174561, 0.728516),Vertex( -27.569424, 25.80184, 20.030354, 0.149902, 0.305176),Vertex( -33.164639, 17.619513, 16.531151, 0.176392, 0.444824),
Vertex( -36.235256, 8.763, 11.773544, 0.199951, 0.600098),Vertex( -36.547523, -0.525365, 6.119697, 0.223511, 0.727539),Vertex( -31.176229, 28.030968, 10.411452, 0.198608, 0.271729),
Vertex( -36.398918, 18.483217, 5.678574, 0.225342, 0.429199),Vertex( -38.100006, 8.763, -0.000003, 0.249878, 0.600098),Vertex( -36.54752, -0.525365, -6.119703, 0.276367, 0.727539),
Vertex( -32.409798, 28.793356, -0.000003, 0.25, 0.260742),Vertex( -36.398918, 18.483217, -5.678581, 0.274414, 0.429199),Vertex( -36.235252, 8.763, -11.773551, 0.299805, 0.600098),
Vertex( -32.78513, -0.525365, -16.800684, 0.325195, 0.728516),Vertex( -31.176226, 28.030968, -10.411459, 0.30127, 0.271729),Vertex( -33.164635, 17.619513, -16.531158, 0.323486, 0.444824),
Vertex( -30.823544, 8.763, -22.394621, 0.349854, 0.600098),Vertex( -26.109558, -0.525365, -25.988813, 0.374512, 0.728516),Vertex( -27.569418, 25.80184, -20.030359, 0.349854, 0.305176),
Vertex( -22.394617, 8.763, -30.823549, 0.399902, 0.600098),Vertex( -17.113987, -0.525365, -32.867668, 0.423584, 0.727539),Vertex( -25.970497, 17.619513, -26.433039, 0.376221, 0.444824),
Vertex( -11.773548, 8.763, -36.235256, 0.449951, 0.600098),Vertex( -5.473627, -0.525365, -36.649853, 0.476318, 0.727539),Vertex( -16.648531, 18.483217, -32.862652, 0.425293, 0.429199),
Vertex( -19.53586, 28.03097, -26.433039, 0.398682, 0.271729),Vertex( -22.75318, 34.465603, -16.531157, 0.349854, 0.186401),Vertex( -10.015173, 28.793356, -30.823549, 0.449951, 0.260742),
Vertex( -5.847234, 18.483217, -36.372208, 0.474609, 0.429199),Vertex( 0.267903, 28.03097, -32.867668, 0.500977, 0.271729),Vertex( 0.000001, 8.763, -38.100006, 0.5, 0.600098),
Vertex( 5.84724, -0.525365, -36.372208, 0.524902, 0.728516),Vertex( 5.473629, 17.619513, -36.649853, 0.523438, 0.444824),Vertex( 10.530586, 25.80184, -32.409798, 0.549805, 0.305176),
Vertex( 11.773553, 8.763, -36.235256, 0.549805, 0.600098),Vertex( 16.648542, -0.525365, -32.862648, 0.574219, 0.728516),Vertex( 17.113995, 17.619513, -32.867668, 0.576172, 0.444824),
Vertex( 22.394627, 8.763, -30.823542, 0.599609, 0.600098),Vertex( 26.109562, 18.483217, -25.98881, 0.625, 0.429199)
}; 
const u16[] skybox_IDs = {
	0,1,2,1,3,2,1,4,3,4,5,3,4,6,5,6,7,5,1,8,4,6,9,7,10,7,9,4,11,6,8,11,4,6,12,9,11,12,6,9,13,10,13,9,12,14,15,10,14,16,17,10,18,14,18,16,14,13,18,10,18,19,16,
	20,19,18,13,20,18,20,21,19,20,13,22,13,12,22,21,20,23,20,22,23,21,23,24,22,12,25,11,25,12,23,22,26,22,25,26,24,23,27,23,26,27,27,28,24,29,25,11,8,29,11,30,28,27,30,31,28,
	27,26,32,32,30,27,26,25,33,26,33,32,29,33,25,34,31,30,34,35,31,36,30,32,36,34,30,32,33,37,37,36,32,35,34,38,35,38,39,34,36,40,34,40,38,36,37,41,36,41,40,42,37,33,42,41,37,
	42,33,29,40,41,43,44,42,29,44,29,8,45,41,42,44,45,42,45,43,41,46,44,8,46,8,1,47,46,1,48,45,44,46,48,44,47,49,46,49,48,46,48,50,45,50,43,45,49,51,48,51,50,48,47,52,49,47,53,
	52,49,54,51,52,54,49,51,55,50,54,56,51,51,56,55,52,57,54,55,58,50,50,58,43,52,59,57,53,59,52,57,60,54,54,60,56,53,61,59,53,62,61,59,63,57,62,64,61,62,65,64,61,66,59,59,66,
	63,61,64,67,61,67,66,65,68,64,65,69,68,64,70,67,64,68,70,71,69,72,71,68,69,73,68,71,73,70,68,74,73,71,74,71,75,76,74,75,77,74,76,77,78,74,78,73,74,78,77,79,80,70,73,78,80,
	73,78,79,81,80,78,81,81,79,82,80,83,70,67,70,83,80,81,84,83,80,84,81,82,85,84,81,85,85,82,86,67,83,87,84,87,83,67,87,66,85,88,84,88,87,84,86,89,85,89,88,85,90,89,86,66,87,
	91,88,91,87,66,91,63,89,92,88,92,91,88,90,93,89,93,92,89,93,90,94,92,95,91,63,91,95,93,96,92,96,95,92,93,94,97,96,93,97,97,94,98,96,99,95,97,98,100,100,98,101,96,97,102,102,
	97,100,99,96,102,101,103,100,104,103,101,100,105,102,103,105,100,102,106,99,105,106,102,107,95,99,107,99,106,63,95,107,57,63,107,57,107,60,107,106,60,60,106,108,105,108,106,
	60,108,56,109,108,105,103,109,105,56,108,110,109,110,108,56,110,55,111,109,103,104,111,103,111,104,112,113,110,109,111,113,109,55,110,114,113,114,110,55,114,58,111,112,115,
	113,111,115,115,112,116,114,113,117,113,115,117,117,58,114,115,116,118,117,115,118,118,116,39,39,38,118,119,58,117,118,119,117,38,119,118,119,43,58,38,40,119,40,43,119
};